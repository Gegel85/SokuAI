//
// Created by PinkySmile on 21/05/2021.
//

#ifndef SOKUAI_BASEAI_HPP
#define SOKUAI_BASEAI_HPP


#include <map>
#include <vector>
#include "Packet.hpp"
#include "GameInstance.hpp"

namespace Trainer
{
	class BaseAI {
	private:
		std::vector<Input> _bufferedInput;

	protected:
		SokuLib::Character _character;
		unsigned char _palette;

		static void buildDeck(unsigned character, unsigned char (&deck)[20])
		{
			static const std::vector<std::vector<unsigned short>> cards = {
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 204, 206, 207, 208, 209, 210, 214, 219 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 219 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 219 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 204, 205, 206, 207, 208, 215 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 204, 205, 206, 207, 208, 212 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 205, 206, 207, 208, 211, 212 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 204, 205, 206, 207, 211 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 204, 205, 206, 207, 210 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 204, 205, 206, 207, 208, 210, 213 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 212 },
				{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111 }
			};

			for (int i = 0; i < 20;) {
				auto card = cards[character][rand() % cards[character].size()];
				auto nb = 0;

				for (int j = 0; j < i; j++)
					nb += card == deck[j];
				if (nb >= 4)
					continue;
				deck[i++] = card;
			}
		}

	public:
		static const std::map<std::string, std::vector<Input>> actionsBuffers;
		static const std::vector<const char *> actions;

		BaseAI(SokuLib::Character character, unsigned char palette);
		virtual ~BaseAI() = default;
		virtual std::string toString() const { return "BaseAI"; }
		virtual void onWin(unsigned char myScore, unsigned char opponentScore) {}
		virtual void onLose(unsigned char myScore, unsigned char opponentScore) {}
		virtual void onTimeout(unsigned char myScore, unsigned char opponentScore) {}
		virtual void onGameStart(SokuLib::Character myChr, SokuLib::Character opponentChr, unsigned int inputDelay) {}
		virtual const char *getAction(const GameInstance::GameFrame &frame, bool isLeft);
		virtual Input getInputs(const GameInstance::GameFrame &frame, bool isLeft);
		virtual GameInstance::PlayerParams getParams() const
		{
			GameInstance::PlayerParams params{
				this->_character,
				this->_palette
			};

			buildDeck(this->_character, params.deck);
			strcpy_s(params.name, "Random AI");
			return params;
		}
	};
}


#endif //SOKUAI_BASEAI_HPP
